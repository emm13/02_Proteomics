# Making a list of domains that define RNA binding proteins
# Couldn't find PIWI/PAZ domains in the UV gene list but present in Geiger list
# Looking at Burd paper which includes 'RGG' box which I think is HnRNP as well as cold_shock domain
# Can't find TRAP protein (trp RNA-Binding attenuation protein)
# Have added new RBDs from Castello's 2016 paper - Thioredoxin, PDZ, DZF,
#--------------------------------------------------------------------------------
rbd.doms = c("RRM_dom","KH_dom","dsRBD_dom","Znf_CCCH","Znf_C2H2","Znf_CCHC","S1_dom","PAZ_dom","Piwi","Nucleotide-bd_a/b_plait","CSD","Cold-shock_CS","Pumilio_RNA-bd_rpt","SAM;","SAM/pointed","DEAD","Thioredoxin","PDZ","DZF_dom")
rbd.doms
# Annotating both geiger and uv-dosage datasets with known "rbd" domains and how many of these RBD domains each protein has.
uv.qm$num.rbds = rowSums(sapply(rbd.doms, function(x) grepl(x, uv.qm$domains)))
uv.qm$which.rbd = apply(sapply(rbd.doms, function(x) grepl(x, uv.qm$domains)),1, function(y) paste(names(which(y==T)),collapse="; "))
#head(uv.qm[which(uv.qm$num.rbds != 0),],n=10)
geiger.qm$num.rbds = rowSums(sapply(rbd.doms, function(x) grepl(x, geiger.qm$domains)))
geiger.qm$which.rbd = apply(sapply(rbd.doms, function(x) grepl(x, geiger.qm$domains)),1, function(y) paste(names(which(y==T)),collapse="; "))
#head(geiger.qm[which(geiger.qm$num.rbds != 0),],n=10)
table(uv.qm$num.rbds) # 315 that have one or more RBD domains
table(geiger.qm$num.rbds) # 707 that have one or more RBD domains
sum(table(uv.qm$num.rbds)) # 315 that have one or more RBD domains
dim(qnt.prot)
dim(oligo.cl.in.nc)
dim(oligo.nc)
cl.qm = queryMany(oligo.cl.in.nc,scopes="symbol",fields=c("ensembl","name","uniprotswissprot","interpro","go"))
cl.qm = queryMany(oligo.cl.in.nc,scopes="symbol",fields=c("ensembl","name","uniprot","interpro","go"))
cl.qm = queryMany(oligo.cl.in.nc$GeneName,scopes="symbol",fields=c("ensembl","name","uniprot","interpro","go"))
cl.qm$domains = sapply(sapply(cl.qm$interpro,"[[",3),function(x) paste(x,collapse="; "))
head(cl.qm)
cl.qm$num.rbds = rowSums(sapply(rbd.doms, function(x) grepl(x, cl.qm$domains)))
cl.qm$which.rbd = apply(sapply(rbd.doms, function(x) grepl(x, cl.qm$domains)),1, function(y) paste(names(which(y==T)),collapse="; "))
head(cl.qm)
table(cl.qm$num.rbds)
dim(cl.qm)
sum(table(cl.qm$num.rbds)[2:4])
sum(table(cl.qm$num.rbds))
sum(table(uv.qm$num.rbds))
sum(table(geiger.qm$num.rbds))
315/1780
length(unique(cl.qm$query))
dim(cl.qm)
dim(uv.qm)
dim(cl.qm)
heaD(cl.qm)
head(cl.qm)
?queryMany
queryMany(c('1053_at', '117_at', '121_at'), scopes="reporter", species=9606)
queryMany("FNDC3B", scopes="symbol", species=9606)
queryMany("FNDC3B", scopes="symbol")
queryMany(c("FNDC3B"), scopes="symbol")
cl.qm = queryMany(oligo.cl.in.nc$GeneName,scopes="symbol",fields=c("ensembl","name","uniprot","interpro","go"),species=9606)
dim(cl.qm)
cl.qm$domains = sapply(sapply(cl.qm$interpro,"[[",3),function(x) paste(x,collapse="; "))
cl.qm$num.rbds = rowSums(sapply(rbd.doms, function(x) grepl(x, cl.qm$domains)))
cl.qm$which.rbd = apply(sapply(rbd.doms, function(x) grepl(x, cl.qm$domains)),1, function(y) paste(names(which(y==T)),collapse="; "))
table(cl.qm$num.rbds) # 375/987 that have one or more RBD domains
sum(table(cl.qm$num.rbds)[2:4]) # 375/987 that have one or more RBD domains
127+205
707/7574
127/332
315/1780
nc.qm = queryMany(oligo.nc$GeneName,scopes="symbol",fields=c("ensembl","name","uniprot","interpro","go"),species=9606)
nc.qm$domains = sapply(sapply(nc.qm$interpro,"[[",3),function(x) paste(x,collapse="; "))
nc.qm$num.rbds = rowSums(sapply(rbd.doms, function(x) grepl(x, nc.qm$domains)))
nc.qm$which.rbd = apply(sapply(rbd.doms, function(x) grepl(x, nc.qm$domains)),1, function(y) paste(names(which(y==T)),collapse="; "))
dim(nc)
dim(nc.qm)
table(nc.qm$num.rbds) # /74 (38%) that have one or more known RBD domains
28.74
28/74
cl.qm = queryMany(oligo.cl$GeneName,scopes="symbol",fields=c("ensembl","name","uniprot","interpro","go"),species=9606)
cl.only.qm = queryMany(oligo.cl$GeneName,scopes="symbol",fields=c("ensembl","name","uniprot","interpro","go"),species=9606)
cl.only.qm$domains = sapply(sapply(cl.only.qm$interpro,"[[",3),function(x) paste(x,collapse="; "))
cl.only.qm$num.rbds = rowSums(sapply(rbd.doms, function(x) grepl(x, cl.only.qm$domains)))
cl.only.qm$which.rbd = apply(sapply(rbd.doms, function(x) grepl(x, cl.only.qm$domains)),1, function(y) paste(names(which(y==T)),collapse="; "))
dim(cl.only.qm)
table(cl.only.qm$num.rbds) # 28/261 (38%) that have one or more known RBD domains
sum(table(cl.only.qm$num.rbds)[2:4]) # 28/261 (38%) that have one or more known RBD domains
99/261
dim(rbds)
dim(rbd.doms)
length(rbd.doms)
unlist(rbd.doms)
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)))
both = attr(v,"intersection")$`Trizol:oligodT` # n = 198
both.enrich.go = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.go.sym)
both.enrich.go = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.go.sym)
both.enrich.interpro = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.sym)
write.table(both.enrich,paste(outdir,"oligodT-Trizol-common-genes-Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
intersect(oligo.only,geiger.qm$symbol) # 45/57
bias.df
oo = intersect(oligo.only,geiger.qm$symbol) # 45/57
oligo.geiger.vs.all = runGoseq(oo,bias.df[oligo.cl$GeneName,], bias.df$protbias[oligo.cl$GeneName],geiger.cat.go.sym)
oligo.geiger.vs.all
oligo.geiger.vs.all = runGoseq(oo,bias.df[oligo.cl$GeneName,], bias.df$protbias[oligo.cl$GeneName],geiger.cat.go)
oligo.geiger.vs.all
oo
bias.df[oligo.cl$GeneName,]
dim(bias.df[oligo.cl$GeneName,])
bias.df$protbias[oligo.cl$GeneName]
dim(bias.df$protbias[oligo.cl$GeneName])
length(bias.df$protbias[oligo.cl$GeneName])
head(geiger.cat.go)
head(geiger.cat.go.sym)
oligo.geiger.vs.all.go = runGoseq(oo,bias.df[oligo.cl$GeneName,], bias.df$protbias[oligo.cl$GeneName],geiger.cat.go.sym)
oligo.geiger.vs.all.go
intersect(oo,oligo.cl$GeneName)
head(geiger.cat.go.sym)
head(geiger.cat.sym)
geiger.cat.sym[which(geiger.cat.sym$symbol %in% oo),]
oligo.only.enrich.go
#-----------------------------------------------------------------------
# 11 : Looking at the intersect of proteins between oligodT and Trizol
#-----------------------------------------------------------------------
# Using Trizol mapped to hgnc_symbol as oligodT is only in symbols.
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)))
both = attr(v,"intersection")$`Trizol:oligodT` # n = 198
both.enrich.go = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.go.sym)
both.enrich.interpro = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.sym)
write.table(both.enrich,paste(outdir,"oligodT-Trizol-common-genes-Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
#-----------------------------------------------------------------------
# 11 : Looking at the intersect of proteins between oligodT and Trizol
#-----------------------------------------------------------------------
# Using Trizol mapped to hgnc_symbol as oligodT is only in symbols.
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)))
both = attr(v,"intersection")$`Trizol:oligodT` # n = 198
both.enrich.go = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.go.sym)
both.enrich.interpro = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.sym)
#write.table(both.enrich,paste(outdir,"oligodT-Trizol-common-genes-Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
oligo.only = attr(v,"intersection")$`oligodT` # n = 57
oligo.only.enrich.go = runGoseq(oligo.only,bias.df, bias.df$protbias,geiger.cat.go.sym)
oligo.only.enrich.interpro = runGoseq(oligo.only,bias.df, bias.df$protbias,geiger.cat.sym)
write.table(oligo.only.enrich,paste(outdir,"oligodT-only-genes-101-Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
#-----------------------------------------------------------------------
# 11 : Looking at the intersect of proteins between oligodT and Trizol
#-----------------------------------------------------------------------
# Using Trizol mapped to hgnc_symbol as oligodT is only in symbols.
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)))
both = attr(v,"intersection")$`Trizol:oligodT` # n = 198
both.enrich.go = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.go.sym)
both.enrich.interpro = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.sym)
#write.table(both.enrich,paste(outdir,"oligodT-Trizol-common-genes-Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
oligo.only = attr(v,"intersection")$`oligodT` # n = 57
oligo.only.enrich.go = runGoseq(oligo.only,bias.df, bias.df$protbias,geiger.cat.go.sym)
oligo.only.enrich.interpro = runGoseq(oligo.only,bias.df, bias.df$protbias,geiger.cat.sym)
#write.table(oligo.only.enrich,paste(outdir,"oligodT-only-genes-101-Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
trizol.only = attr(v,"intersection")$`Trizol` # n = 1543
trizol.only.enrich.go = runGoseq(trizol.only,bias.df, bias.df$protbias,geiger.cat.go.sym)
trizol.only.enrich.interpro = runGoseq(trizol.only,bias.df, bias.df$protbias,geiger.cat.sym)
#write.table(trizol.only.enrich,paste(outdir,"Trizol-only-genes-1296-Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
oo = intersect(oligo.only,geiger.qm$symbol) # 45/57
intersect(trizol.only,geiger.qm$symbol) # 1461/1543
intersect(both,geiger.qm$symbol) # 196/198
# Enriching those genes that are present in oligodT only, overlaps with Geiger against a background of all oligo.dT crosslinked genes
# No enrichment
oligo.geiger.vs.all.go = runGoseq(oo,bias.df[oligo.cl$GeneName,], bias.df$protbias[oligo.cl$GeneName],geiger.cat.go.sym)
both
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)))
both = attr(v,"intersection")$`Trizol:oligodT` # n = 198
both
v
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)))
uv.qm $symbol
oligo.cl$GeneName
both.enrich.go
#-----------------------------------------------------------------------
# 11 : Looking at the intersect of proteins between oligodT and Trizol
#-----------------------------------------------------------------------
# Using Trizol mapped to hgnc_symbol as oligodT is only in symbols.
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)))
both = attr(v,"intersection")$`Trizol:oligodT` # n = 198
both.enrich.go = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.go.sym)
both.enrich.interpro = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.sym)
#write.table(both.enrich,paste(outdir,"oligodT-Trizol-common-genes-Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
oligo.only = attr(v,"intersection")$`oligodT` # n = 57
oligo.only.enrich.go = runGoseq(oligo.only,bias.df, bias.df$protbias,geiger.cat.go.sym)
oligo.only.enrich.interpro = runGoseq(oligo.only,bias.df, bias.df$protbias,geiger.cat.sym)
#write.table(oligo.only.enrich,paste(outdir,"oligodT-only-genes-101-Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
trizol.only = attr(v,"intersection")$`Trizol` # n = 1543
trizol.only.enrich.go = runGoseq(trizol.only,bias.df, bias.df$protbias,geiger.cat.go.sym)
trizol.only.enrich.interpro = runGoseq(trizol.only,bias.df, bias.df$protbias,geiger.cat.sym)
#write.table(trizol.only.enrich,paste(outdir,"Trizol-only-genes-1296-Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
oo = intersect(oligo.only,geiger.qm$symbol) # 45/57
intersect(trizol.only,geiger.qm$symbol) # 1461/1543
intersect(both,geiger.qm$symbol) # 196/198
# Enriching those genes that are present in oligodT only, overlaps with Geiger against a background of all oligo.dT crosslinked genes
# No enrichment
oligo.geiger.vs.all.go = runGoseq(oo,bias.df[oligo.cl$GeneName,], bias.df$protbias[oligo.cl$GeneName],geiger.cat.go.sym)
bias.df
both
v
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)))
v
?venn
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)),intersections=T)
v
?venn
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)),intersections=T)
v
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)))
v
?venn
library(venn)
?venn
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)))
v
library(venn)
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)),intersections=T)
v = venn(list(Trizol=unique(uv.qm$symbol),oligodT=unique(oligo.cl$GeneName)),intersections=T)
v
Trizol = unique(uv.qm$symbol)
oligodT = unique(oligo.cl$GeneName)
both= intersect(Trizol, oligodT)
both
both.enrich.go = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.go.sym)
both.enrich.go
both.enrich.interpro = runGoseq(both,bias.df, bias.df$protbias,geiger.cat.sym)
oligo.only = setdiff(oligodT,Trizol) # n = 57
both.enrich.interpro
oligo.only = setdiff(oligodT,Trizol) # n = 57
oligo.only.enrich.go = runGoseq(oligo.only,bias.df, bias.df$protbias,geiger.cat.go.sym)
oligo.only.enrich.go = runGoseq(oligo.only,bias.df, bias.df$protbias,geiger.cat.go.sym)
oligo.only.enrich.interpro = runGoseq(oligo.only,bias.df, bias.df$protbias,geiger.cat.sym)
oligo.only.enrich.go
oligo.only.enrich.interpro
oligo.cl
oligo.only
trizol.only = setdiff(Trizol,oligodT)
trizol.only.enrich.go = runGoseq(trizol.only,bias.df, bias.df$protbias,geiger.cat.go.sym)
trizol.only.enrich.go = runGoseq(trizol.only,bias.df, bias.df$protbias,geiger.cat.go.sym)
trizol.only.enrich.interpro = runGoseq(trizol.only,bias.df, bias.df$protbias,geiger.cat.sym)
trizol.only.enrich.go
trizol.only.enrich.go[,c(1,6,4:5,2,7)]
trizol.only.enrich.go[,c(1,6,4:5,2,8)]
trizol.only.enrich.go[,c(1,6:7,4:5,2,8)]
oligo.only.enrich.go[,c(1,6:7,4:5,2,8)]
oligo.only.enrich.go[,c(1,6:7,4:5,2,8)]
oligo.only
both.enrich.go[,c(1,6:7,4:5,2,8)]
both.enrich.go[,c(1,6:7,4:5,2,8)]
both.enrich.interpro
oo = intersect(oligo.only,geiger.qm$symbol) # 45/57
oo
oligo.geiger.vs.all.go = runGoseq(oo,bias.df[oligo.cl$GeneName,], bias.df$protbias[oligo.cl$GeneName],geiger.cat.go.sym)
oligo.geiger.vs.all.go
tt = intersect(trizol.only,geiger.qm$symbol) # 1461/1543
oligo.geiger.vs.all.go = runGoseq(tt,bias.df[oligo.cl$GeneName,], bias.df$protbias[oligo.cl$GeneName],geiger.cat.go.sym)
oligo.geiger.vs.all.go
oligo.geiger.vs.all.go = runGoseq(tt,bias.df, bias.df$protbias,geiger.cat.go.sym)
oligo.geiger.vs.all
tt
bias.df
tt
View(oligo.geiger.vs.all.go)
tt.geiger.vs.all.go = runGoseq(tt,bias.df, bias.df$protbias,geiger.cat.go.sym)
View(tt.geiger.vs.all.go)
oo.geiger.vs.all.go = runGoseq(oo,bias.df[oligo.cl$GeneName], bias.df$protbias[oligo.cl$GeneName],geiger.cat.go.sym)
oo.geiger.vs.all.go = runGoseq(oo,bias.df[oligo.cl$GeneName,], bias.df$protbias[oligo.cl$GeneName],geiger.cat.go.sym)
oo.geiger.vs.all.go
oo.geiger.vs.all.go = runGoseq(oo,bias.df[oligo.cl$GeneName,], bias.df$protbias[oligo.cl$GeneName],geiger.cat.sym)
oo.geiger.vs.all.go
write.table(cl.enrich.go[,c(1,6:7,4:5,2,8)],paste(outdir,"oligodT-crosslinked_GO-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(cl.enrich.interpro,paste(outdir,"ToligodT-crosslinked_Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
outdir
#---------------------------------------------------------------------------
# Author 	      : Manasa Ramakrishna, mr325@le.ac.uk
# Date started 	: 4th August, 2017
# Last modified : 4th August, 2017
# Aim 		      : To take a look at first SILAC labelled LOPIT data on Trizol
# Depends       : On 'silacFunctions.R'. Make sure they are in the same directory
# Notes         : Works on data from Rayner's first experiments
#---------------------------------------------------------------------------
# Invoking libraries
library(MSnbase)
library(gplots)
library(reshape2)
library(VIM)
library(zoo)
library(spatstat) # "im" function
library(ggbiplot)
library(org.Hs.eg.db)
library(clusterProfiler)
library("biomaRt")
library(goseq)
library(limma)
library(ggplot2)
library(outliers)
library(RColorBrewer)
library(stringr)
#Setting working directories
wd = "/Users/manasa/Documents/Work/TTT/02_Proteomics/02_First-TMT-data/"
setwd(wd)
getwd()
indir = paste(wd,"Input",sep="/")
outdir = paste(wd,paste(Sys.Date(),"Output",sep = "_"),sep = "/")
if (exists(outdir)){
print("Outdir exists")
}else{
dir.create(outdir)
}
# Sourcing function file
source("tmtFunctions.R")
outdir
write.table(cl.enrich.go[,c(1,6:7,4:5,2,8)],paste(outdir,"oligodT-crosslinked_GO-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(cl.enrich.interpro,paste(outdir,"ToligodT-crosslinked_Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(nc.enrich.go[,c(1,6:7,4:5,2,8)],paste(outdir,"oligodT-crosslinked_GO-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(nc.enrich.interpro,paste(outdir,"ToligodT-crosslinked_Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
outdir
write.table(cl.enrich.go[,c(1,6:7,4:5,2,8)],paste(outdir,"oligodT-crosslinked_GO-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(cl.enrich.interpro,paste(outdir,"ToligodT-crosslinked_Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(nc.enrich.go[,c(1,6:7,4:5,2,8)],paste(outdir,"oligodT-non-crosslinked_GO-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(nc.enrich.interpro,paste(outdir,"ToligodT-non-crosslinked_Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(cl.enrich.go[,c(1,6:7,4:5,2,8)],paste(outdir,"oligodT-crosslinked_GO-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(cl.enrich.interpro,paste(outdir,"oligodT-crosslinked_Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(nc.enrich.go[,c(1,6:7,4:5,2,8)],paste(outdir,"oligodT-non-crosslinked_GO-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(nc.enrich.interpro,paste(outdir,"oligodT-non-crosslinked_Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
table(uv.qm$num.rbds) # 315/1780 (18%) that have one or more known RBD domains
table(geiger.qm$num.rbds) # 707/7574 (9%) that have one or more known RBD domains
table(cl.qm$num.rbds) # 127/332 (38%) that have one or more known RBD domains
table(nc.qm$num.rbds) # 28/74 (38%) that have one or more known RBD domains
table(cl.only.qm$num.rbds)
cl.qm = queryMany(oligo.cl.in.nc$GeneName,scopes="symbol",fields=c("ensembl","name","uniprot","interpro","go"),species=9606)
cl.qm = queryMany(oligo.cl.in.nc$GeneName,scopes="symbol",fields=c("ensembl","name","uniprot","interpro","go"),species=9606)
cl.qm$domains = sapply(sapply(cl.qm$interpro,"[[",3),function(x) paste(x,collapse="; "))
cl.qm$domains = sapply(sapply(cl.qm$interpro,"[[",3),function(x) paste(x,collapse="; "))
cl.qm$num.rbds = rowSums(sapply(rbd.doms, function(x) grepl(x, cl.qm$domains)))
table(uv.qm$num.rbds) # 315/1780 (18%) that have one or more known RBD domains
table(geiger.qm$num.rbds) # 707/7574 (9%) that have one or more known RBD domains
table(cl.qm$num.rbds) # 127/332 (38%) that have one or more known RBD domains
table(nc.qm$num.rbds) # 28/74 (38%) that have one or more known RBD domains
table(cl.only.qm$num.rbds) # 99/261 (38%) that have one or more known RBD domains
runGoseq <- function(genelist,bglist,bias.dat=NULL,cat.oligo){
# setting up goseq object
all.genes.comp = rep(0,nrow(bglist))
names(all.genes.comp) = rownames(bglist)
all.genes.comp[which(names(all.genes.comp) %in% unique(genelist))] = 1
table(all.genes.comp)
# Remove missing values
comp.no.missing = all.genes.comp[which(!is.na(names(all.genes.comp)))]
table(comp.no.missing)
# Running the function to calculate weights. We have no bias information as we did in UV experiment
# This is because mass spec was run in detection mode not quantitation mode.
pwf.comp = nullp(comp.no.missing,'hg19','geneSymbol', bias=bias.dat,plot.fit=TRUE)
# goseq enrichment with domains for cross-linked samples
goseq.comp = goseq(pwf.comp,gene2cat = cat.oligo)
goseq.comp$BH_over_represented_pvalue = p.adjust(goseq.comp$over_represented_pvalue,method = "BH")
goseq.comp
enriched.goseq.comp = goseq.comp[which(goseq.comp$BH_over_represented_pvalue <= 0.05),]
return(list(goseq.comp,enriched.goseq.comp))
}
runGoseq <- function(genelist,bglist,bias.dat=NULL,cat.oligo){
# setting up goseq object
all.genes.comp = rep(0,nrow(bglist))
names(all.genes.comp) = rownames(bglist)
all.genes.comp[which(names(all.genes.comp) %in% unique(genelist))] = 1
table(all.genes.comp)
# Remove missing values
comp.no.missing = all.genes.comp[which(!is.na(names(all.genes.comp)))]
table(comp.no.missing)
# Running the function to calculate weights. We have no bias information as we did in UV experiment
# This is because mass spec was run in detection mode not quantitation mode.
pwf.comp = nullp(comp.no.missing,'hg19','geneSymbol', bias=bias.dat,plot.fit=TRUE)
# goseq enrichment with domains for cross-linked samples
goseq.comp = goseq(pwf.comp,gene2cat = cat.oligo)
goseq.comp$BH_over_represented_pvalue = p.adjust(goseq.comp$over_represented_pvalue,method = "BH")
goseq.comp
enriched.goseq.comp = goseq.comp[which(goseq.comp$BH_over_represented_pvalue <= 0.05),]
return(list(goseq.comp,enriched.goseq.comp))
}
cl.all.enrich.interpro
cl.all.enrich.go = runGoseq(oligo.cl.in.nc$GeneName,bias.df,bias.df$protbias,geiger.cat.go.sym)
cl.all.enrich.go[[1]]
cl.all.enrich.interpro = runGoseq(oligo.cl.in.nc$GeneName,bias.df,bias.df$protbias,geiger.cat.sym)
cl.all.enrich.interpro
?queryMany
oligo.only
geiger.qm[which(geiger.qm$symbol %in% oligo.only),]
oligo.only.doms = data.frame(geiger.qm[which(geiger.qm$symbol %in% oligo.only),]
)
colnames(geiger.qm)
oligo.only.doms = data.frame(geiger.qm[which(geiger.qm$symbol %in% oligo.only),c(1,3:7,13:18)]
)
oligo.only.doms
oligo.only.doms = data.frame(geiger.qm[which(geiger.qm$symbol %in% oligo.only),c(1,3:7,13:18)])
colnames(geiger.qm)
oligo.only.doms = data.frame(geiger.qm[which(geiger.qm$symbol %in% oligo.only),c(1,3,5:7,9:12,17:18)])
oligo.only.doms
oligo.only.qm = geiger.qm[which(geiger.qm$symbol %in% oligo.only),c(1,3,5:7,9:12,17:18)]
oligo.only.qm$go.mf = sapply(sapply(oligo.only.qm$go.MF,"[[",2),function(x) paste(x,collapse="; "))
oligo.only.qm$go.cc = sapply(sapply(oligo.only.qm$go.CC,"[[",2),function(x) paste(x,collapse="; "))
oligo.only.doms = geiger.qm[which(geiger.qm$symbol %in% oligo.only),c(1,3,5:7,9:12,17:18)]
oligo.only.qm
oligo.only.qm$go.bp = sapply(sapply(oligo.only.qm$go.BP,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm$go.cc = sapply(sapply(oligo.only.qm$go.CC,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm$go.mf = sapply(sapply(oligo.only.qm$go.MF,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm
colnames(oligo.only.qm)
oligo.only.qm = oligo.only.qm[,c(1:5,12:14,9:11)]
oligo.only.qm
oligo.only.qm = data.frame(oligo.only.qm[,c(1:5,12:14,9:11)])
oligo.only.qm = geiger.qm[which(geiger.qm$symbol %in% oligo.only),c(1,3,5:7,9:12,17:18)]
oligo.only.qm$go.mf = sapply(sapply(oligo.only.qm$go.MF,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm = data.frame(oligo.only.qm[,c(1:5,12:14,9:11)])
oligo.only.qm = geiger.qm[which(geiger.qm$symbol %in% oligo.only),c(1,3,5:7,9:12,17:18)]
oligo.only.qm$go.bp = sapply(sapply(oligo.only.qm$go.BP,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm$go.mf = sapply(sapply(oligo.only.qm$go.MF,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm$go.cc = sapply(sapply(oligo.only.qm$go.CC,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm = data.frame(oligo.only.qm[,c(1:5,12:14,9:11)])
oligo.only.qm
getwd()
wd = "/Users/manasa/Documents/Work/TTT/02_Proteomics/02_First-TMT-data/"
setwd(wd)
getwd()
indir = paste(wd,"Input",sep="/")
outdir = paste(wd,paste(Sys.Date(),"Output",sep = "_"),sep = "/")
if (exists(outdir)){
print("Outdir exists")
}else{
dir.create(outdir)
}
# Sourcing function file
source("tmtFunctions.R")
getwd()
outdir
write.table(oligo.only.qm,paste(outdir,"OligodT-only-GO-Interpro-terms.txt",sep="/"),sep="\t")
write.table(oligo.only.qm,paste(outdir,"OligodT-only-GO-Interpro-terms.txt",sep="/"),sep="\t",quote=F)
oligo.only.qm = geiger.qm[which(geiger.qm$symbol %in% oligo.only),c(1,3,5:7,9:12,17:18)]
oligo.only.qm$go.bp = sapply(sapply(oligo.only.qm$go.BP,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm$go.cc = sapply(sapply(oligo.only.qm$go.CC,"[[",3),function(x) paste(x,collapse="; "))
colnames(oligo.only.qm)
oligo.only.qm = data.frame(oligo.only.qm[,c(1,3:5,12:14,9:11)])
oligo.only.qm = geiger.qm[which(geiger.qm$symbol %in% oligo.only),c(1,3,5:7,9:12,17:18)]
oligo.only.qm$go.mf = sapply(sapply(oligo.only.qm$go.MF,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm = data.frame(oligo.only.qm[,c(1,3:5,12:14,9:11)])
head(oligo.only.qm)
oligo.only.qm = geiger.qm[which(geiger.qm$symbol %in% oligo.only),c(1,3,5:7,9:12,17:18)]
oligo.only.qm$go.bp = sapply(sapply(oligo.only.qm$go.BP,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm$go.mf = sapply(sapply(oligo.only.qm$go.MF,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm$go.cc = sapply(sapply(oligo.only.qm$go.CC,"[[",3),function(x) paste(x,collapse="; "))
oligo.only.qm = data.frame(oligo.only.qm[,c(1,3:5,12:14,9:11)])
write.table(oligo.only.qm,paste(outdir,"OligodT-only-GO-Interpro-terms.txt",sep="/"),sep="\t",quote=F)
write.table(oligo.only.qm,paste(outdir,"OligodT-only-GO-Interpro-terms.txt",sep="/"),sep="\t",quote=F,row.names=F)
head(uv.qm)
grep("Arm",uv.qm$domains)
grep("Arm",uv.qm$domains,value=T)
uv.qm$querygrep("Arm",uv.qm$domains)
uv.qm$query[grep("Arm",uv.qm$domains)]
uv.qm[grep("Arm",uv.qm$domains),]
uv.qm[grep("Arm",uv.qm$domains),c("name","symbol","query")]
data.fame(uv.qm[grep("Arm",uv.qm$domains),c("name","symbol","query")])
as.data.fame(uv.qm[grep("Arm",uv.qm$domains),c("name","symbol","query")])
?data.frame
data.frame(uv.qm[grep("Arm",uv.qm$domains),c("name","symbol","query")])
data.frame(geiger.qm[grep("Arm",geiger.qm$domains),c("name","symbol","query")])
data.frame(cl.qm[grep("Arm",cl.qm$domains),c("name","symbol","query")])
data.frame(cl.qm[grep("Arm",cl.qm$domains),c("name","uniprot","query")])
data.frame(cl.qm[grep("Arm",cl.qm$domains),c("name","uniprot","query")])
names(cl.qm)
data.frame(cl.qm[grep("Arm",cl.qm$domains),c("name","uniprot.Swiss.Prot","query")])
data.frame(nc.qm[grep("Arm",nc.qm$domains),c("name","uniprot.Swiss.Prot","query")])
names(uv.q,)
names(uv.qm)
uv.qm[uv.qm[grep("Arm",uv.qm$domains),c("_id","name","symbol","query","domains","go.all","num.rbds","which.rbd")]
]
uv.qm[grep("Arm",uv.qm$domains),c("_id","name","symbol","query","domains","go.all","num.rbds","which.rbd")]
data.frame(uv.qm[grep("Arm",uv.qm$domains),c("_id","name","symbol","query","domains","num.rbds","which.rbd")])
tymp = data.frame(uv.qm[grep("Arm",uv.qm$domains),c("_id","name","symbol","query","domains","num.rbds","which.rbd")])
outdir
write.table(tymp,paste(outdir,"List-of-Armadillo-domain-proteins-from-Trizol.txt",sep="/"),row.names=F,quote=F,sep="\t")
suppressMessages(library(ggplot2))
suppressMessages(library(reshape2))
suppressMessages(library(Hmisc))
suppressMessages(library(MSnbase))
suppressMessages(library(plyr))
suppressMessages(library(dplyr))
suppressMessages(library(gplots))
suppressMessages(library("MSnbase"))
suppressMessages(library("pRoloc"))
library(ggplot2)
library(reshape2)
lirary(Hmisc)
library(Hmisc)
library(MSnbase)
library(plyr)
library(dplyr)
library(gplot)
library(gplots)
library(MSnbase)
library(pRoloc)
library(pRolocdata)
library(pRoloc)
source("https://bioconductor.org/biocLite.R")
biocLite("MLInterfaces")
library(pRoloc)
library(MLInterfaces)
getLoadedDLLs()
suppressMessages(library(ggplot2))
suppressMessages(library(reshape2))
suppressMessages(library(Hmisc))
suppressMessages(library(MSnbase))
suppressMessages(library(plyr))
suppressMessages(library(dplyr))
suppressMessages(library(gplots))
suppressMessages(library("MSnbase"))
suppressMessages(library("pRoloc"))
R_MAX_NUM_DLLS
.Renviron
R_MAX_NUM_DLLS=150
dyn.load(R_MAX_NUM_DLLS=150)
dyn.load("MLImterfaces",R_MAX_NUM_DLLS=150)
?dyn.load
dim(getLoadedDLLs())
length(getLoadedDLLs())
getLoadedDLLs()
?getLoadedDLLs
